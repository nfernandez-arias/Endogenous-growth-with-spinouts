##### Clean up: remove inventors, patents data.tables
rm(list = c("inventors","patents"))
######################################################################
######################################################################
## Construction of geographic distribution of R&D for each gvkey-year
#
## Algorithm:
#
# For inventorsPatents dataset, Create new variable, inventorCount, that
# counts number of inventors for each patent (i.e. count # of observations per patent)
# Then invert - this is now the weight assigned to each patent-city observation.
#
# This only gives me the ability to assign a state to gvkey-year observations
# that match the patent database, i.e. where the company applied for
# a patent.
#
# In order to use all, need to next import dynass and compustat,
# merge with inventorsPatentsWeights, and do the following:
#
# (1) Assign a weight of 1 to gvkey-year observations which do not have a patent
# (2) Assign the gvkey-year state to inventorState for those observations
# (i.e. treat all R&D as occuring in the main state of the company when the company
# does not apply for any patents in that year - the natural approximation)
#
######################################################################
######################################################################
### Compute weights - easy with data.table
inventorsPatentsWeights <- inventorsPatents[ , weight := .N, by = patent]
inventorsPatentsWeights$weight <- 1/inventorsPatentsWeights$weight
# clean up
rm(list=c("inventorsPatents"))
### Load in dynass, compustat and merge
## Load dynass
dynass <- read.dta13('Data/dynass_reshaped.dta')
# Clean
dynass$gvkey <- as.integer(dynass$gvkey)
dynass <- dynass %>% select(gvkey,pdpass,year)
## Merge inventorsPatentsWeights and dynass
# Prepare for merge
setDT(dynass,keep.rownames = FALSE)
setkey(dynass,pdpass,year)
setkey(inventorsPatentsWeights,pdpass,year)
# Merge
inventorsPatentsWeightsDynass <- merge(inventorsPatentsWeights,dynass)
## Clean up: remove inventorsAndPatents and dynass
rm(list = c("inventorsPatentsWeights","dynass"))
#### Merge patentsAssigneesDynass with compustat's XRD data
## Load compustat dataset and clean
compustat <- read.dta13('Raw/compustat_annual.dta')
compustat <- compustat %>% select(gvkey,fyear,xrd,state)
compustat$year <- compustat$fyear
compustat$gvkey <- as.integer(compustat$gvkey)
## Merge and clean
# Convert compustat to data.table and set keys
setDT(compustat,keep.rownames = FALSE)
setkey(compustat,gvkey,year)
setkey(inventorsPatentsWeightsDynass,gvkey,year)
inventorsPatentsWeightsCompustat <- merge(inventorsPatentsWeightsDynass,compustat,by = c("gvkey","year"),all.y = TRUE)
rm(list = c("inventorsPatentsWeightsDynass","compustat"))
# Make tibble - necessary for spread()
inventorsPatentsWeightsCompustat <- tibble::rowid_to_column(inventorsPatentsWeightsCompustat,"ID")
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat[is.na(inventorState),weight := 1]
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat[is.na(inventorState),inventorState := state]
# Spread to make column for each state's weight
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat %>% select(ID,gvkey,patent,xrd,year,inventorState,weight)
inventorsPatentsWeightsCompustatWide <- inventorsPatentsWeightsCompustat %>% spread(inventorState,weight)
# Clean up: remove inventorsPatentsCompustat
rm(inventorsPatentsWeightsCompustat)
# Extract just weights and rename to a better name
temp <- inventorsPatentsWeightsCompustatWide %>% select(-V1)
temp[, 5:69 := lapply(.SD, sum, na.rm = TRUE), by = c("gvkey","year"), .SDcols = 5:69]
# Extract just weights and rename to a better name
gvkeyXrdYearWeights <- inventorsPatentsWeightsCompustatWide %>% select(-V1)
# Sum by gvkey-year
gvkeyXrdYearWeights <- gvkeyXrdYearWeights[, 5:69 := lapply(.SD, sum, na.rm = TRUE), by = c("gvkey","year"), .SDcols = 5:69]
# Sum by gvkey-year
setkey(gvkeyXrdYearWeights,gvkey,year)
gvkeyXrdYearWeights <- gvkeyXrdYearWeights[, 5:69 := lapply(.SD, sum, na.rm = TRUE), by = c("gvkey","year"), .SDcols = 5:69]
View(gvkeyXrdYearWeights)
# Sum by gvkey-year
setDT(gvkeyXrdYearWeights)
setkey(gvkeyXrdYearWeights,gvkey,year)
gvkeyXrdYearWeights <- gvkeyXrdYearWeights[, 5:69 := lapply(.SD, sum, na.rm = FALSE), by = c("gvkey","year"), .SDcols = 5:69]
# Sum by gvkey-year
setDT(gvkeyXrdYearWeights)
setkey(gvkeyXrdYearWeights,gvkey,year)
temp <- unique(gvkeyXrdYearWeights)
# Extract just weights and rename to a better name
gvkeyXrdYearWeights <- inventorsPatentsWeightsCompustatWide %>% select(-V1)
# Sum by gvkey-year
setDT(gvkeyXrdYearWeights)
setkey(gvkeyXrdYearWeights,gvkey,year)
gvkeyXrdYearWeights <- gvkeyXrdYearWeights[, 5:69 := lapply(.SD, sum, na.rm = TRUE), by = c("gvkey","year"), .SDcols = 5:69] %>% unique()
View(gvkeyXrdYearWeights)
View(inventorsPatentsWeightsCompustatWide)
# Extract just weights and rename to a better name
gvkeyXrdYearWeights <- inventorsPatentsWeightsCompustatWide %>% select(-V1)
# Sum by gvkey-year
setDT(gvkeyXrdYearWeights)
setkey(gvkeyXrdYearWeights,c("gvkey","year"))
# Extract just weights and rename to a better name
gvkeyXrdYearWeights <- inventorsPatentsWeightsCompustatWide %>% select(-V1)
setkey(gvkeyXrdYearWeights,gvkey,year)
# Sum by gvkey-year
setDT(gvkeyXrdYearWeights)
setkey(gvkeyXrdYearWeights,gvkey,year)
gvkeyXrdYearWeights <- gvkeyXrdYearWeights[, 5:69 := lapply(.SD, sum, na.rm = TRUE), by = c("gvkey","year"), .SDcols = 5:69]
View(gvkeyXrdYearWeights)
rm(list = setdiff(ls(), lsf.str()))
setwd("/home/nico/nfernand@princeton.edu/PhD - Big boy/Research/Endogenous growth with worker flows and noncompetes/data/work")
## Load libraries and auxiliary functions
library(readstata13)
library(dplyr)
library(plyr)
library(tidyr)
library(data.table)
source('Code/Functions/stata_merge.R')
##### Load in and clean patents dataset
patents <- read.dta13('Raw/pat76_06_assg.dta')
patents$year <- patents$appyear
patents <- patents %>% dplyr::rename(assigneeState = state, assigneeCountry = country)
patents <- patents %>% dplyr::select(patent,pdpass,year)
##### Load in and clean inventors datasets
# Use data.table::fread -- it is an order of magntiude faster than read.csv
inventors <- fread(file = "Raw/inventor.csv")
# Rename variables
inventors <- inventors %>% dplyr::rename(patent = Patent, inventorCountry = Country, inventorZipCode = Zipcode, inventorState = State, inventorCity = City)
# Convert patent # to numeric. Non-utility patents have non-numeric characters, so these become NAs
# and can then be dropped.
inventors$patent <- as.numeric(as.character(inventors$patent))
inventors$inventorState <- as.character(inventors$inventorState)
inventors <- inventors %>% dplyr::filter(!is.na(patent))
# Select only relevant variables: patent number and inventor state
inventors <- inventors %>% dplyr::select(patent,inventorState)
##### Merge datasets using data.table - order of magnitude faster than baseR merge or plyr::join
# To conserve memory, can define data.tables by reference! beautiful!
setDT(inventors, keep.rownames = FALSE)
setDT(patents, keep.rownames = FALSE)
setkey(inventors,patent)
setkey(patents,patent)
inventorsPatents <- merge(patents,inventors)
##### Clean up: remove inventors, patents data.tables
rm(list = c("inventors","patents"))
### Compute weights - easy with data.table
inventorsPatentsWeights <- inventorsPatents[ , weight := .N, by = patent]
View(inventorsPatentsWeights)
inventorsPatentsWeights$weight <- 1/inventorsPatentsWeights$weight
View(inventorsPatentsWeights)
# clean up
rm(list=c("inventorsPatents"))
### Load in dynass, compustat and merge
## Load dynass
dynass <- read.dta13('Data/dynass_reshaped.dta')
# Clean
dynass$gvkey <- as.integer(dynass$gvkey)
dynass <- dynass %>% select(gvkey,pdpass,year)
## Merge inventorsPatentsWeights and dynass
# Prepare for merge
setDT(dynass,keep.rownames = FALSE)
setkey(dynass,pdpass,year)
setkey(inventorsPatentsWeights,pdpass,year)
# Merge
inventorsPatentsWeightsDynass <- merge(inventorsPatentsWeights,dynass)
## Clean up: remove inventorsAndPatents and dynass
rm(list = c("inventorsPatentsWeights","dynass"))
#### Merge patentsAssigneesDynass with compustat's XRD data
## Load compustat dataset and clean
compustat <- read.dta13('Raw/compustat_annual.dta')
compustat <- compustat %>% select(gvkey,fyear,xrd,state)
compustat$year <- compustat$fyear
compustat$gvkey <- as.integer(compustat$gvkey)
## Merge and clean
# Convert compustat to data.table and set keys
setDT(compustat,keep.rownames = FALSE)
setkey(compustat,gvkey,year)
setkey(inventorsPatentsWeightsDynass,gvkey,year)
inventorsPatentsWeightsCompustat <- merge(inventorsPatentsWeightsDynass,compustat,by = c("gvkey","year"),all.y = TRUE)
rm(inventorsPatentsWeightsDynass)
# Make tibble - necessary for spread()
inventorsPatentsWeightsCompustat <- tibble::rowid_to_column(inventorsPatentsWeightsCompustat,"ID")
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat[is.na(inventorState),weight := 1]
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat[is.na(inventorState),inventorState := state]
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat[is.na(inventorState),inventorState := state]
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat[is.na(inventorState),inventorState := state]
# Spread to make column for each state's weight
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat %>% select(ID,gvkey,patent,xrd,year,inventorState,weight)
inventorsPatentsWeightsCompustatWide <- inventorsPatentsWeightsCompustat %>% spread(inventorState,weight)
# Extract just weights and rename to a better name
gvkeyXrdYearWeights <- inventorsPatentsWeightsCompustatWide %>% select(-V1)
# Sum by gvkey-year
#setDT(gvkeyXrdYearWeights,keep.rownames = FALSE)
#setkey(gvkeyXrdYearWeights,gvkey,year)
gvkeyXrdYearWeights <- gvkeyXrdYearWeights[, 5:69 := lapply(.SD, sum, na.rm = TRUE), by = c("gvkey","year"), .SDcols = 5:69]
View(gvkeyXrdYearWeights)
# Extract just weights and rename to a better name
gvkeyXrdYearWeights <- inventorsPatentsWeightsCompustatWide %>% select(-V1)
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat[, numPatents := .N, by = c("gvkey","year")]
View(inventorsPatentsWeightsCompustat)
inventorsPatentsWeightsCompustat[,numPatents := NULL]
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat[,numPatents := NULL]
inventorsPatentsWeightsCompustat[,numPatents := NULL]
inventorsPatentsWeightsCompustat[,"numPatents" := NULL]
setDT(inventorsPatentsWeightsCompustat)[,numPatents := NULL]
source('Code/Functions/stata_merge.R')
rm(list = setdiff(ls(), lsf.str()))
rm(list = setdiff(ls(), lsf.str()))
setwd("/home/nico/nfernand@princeton.edu/PhD - Big boy/Research/Endogenous growth with worker flows and noncompetes/data/work")
## Load libraries and auxiliary functions
library(readstata13)
library(dplyr)
library(plyr)
library(tidyr)
library(data.table)
source('Code/Functions/stata_merge.R')
inventors <- fread(file = "Raw/inventor.csv")
View(inventors)
View(inventors)
inventors[,Firstname := NULL]
rm(list = setdiff(ls(), lsf.str()))
setwd("/home/nico/nfernand@princeton.edu/PhD - Big boy/Research/Endogenous growth with worker flows and noncompetes/data/work")
## Load libraries and auxiliary functions
library(readstata13)
library(dplyr)
library(plyr)
library(tidyr)
library(data.table)
source('Code/Functions/stata_merge.R')
##### Load in and clean patents dataset
patents <- read.dta13('Raw/pat76_06_assg.dta')
patents$year <- patents$appyear
patents <- patents %>% dplyr::rename(assigneeState = state, assigneeCountry = country)
patents <- patents %>% dplyr::select(patent,pdpass,year)
##### Load in and clean inventors datasets
# Use data.table::fread -- it is an order of magntiude faster than read.csv
inventors <- fread(file = "Raw/inventor.csv")
# Rename variables
inventors <- inventors %>% dplyr::rename(patent = Patent, inventorCountry = Country, inventorZipCode = Zipcode, inventorState = State, inventorCity = City)
# Convert patent # to numeric. Non-utility patents have non-numeric characters, so these become NAs
# and can then be dropped.
inventors$patent <- as.numeric(as.character(inventors$patent))
inventors$inventorState <- as.character(inventors$inventorState)
inventors <- inventors %>% dplyr::filter(!is.na(patent))
# Select only relevant variables: patent number and inventor state
inventors <- inventors %>% dplyr::select(patent,inventorState)
##### Merge datasets using data.table - order of magnitude faster than baseR merge or plyr::join
# To conserve memory, can define data.tables by reference! beautiful!
inventors <- data.table(inventors)
patents <- data.table(patents)
tables()
#setDT(inventors, keep.rownames = FALSE)
#setDT(patents, keep.rownames = FALSE)
setkey(inventors,patent)
setkey(patents,patent)
tables()
inventorsPatents <- merge(patents,inventors)
tables()
##### Clean up: remove inventors, patents data.tables
rm(list = c("inventors","patents"))
tables9)
tables()
### Compute weights - easy with data.table
inventorsPatentsWeights <- inventorsPatents[ , weight := .N, by = patent]
inventorsPatentsWeights$weight <- 1/inventorsPatentsWeights$weight
tables()
### Compute weights - easy with data.table
inventorsPatentsWeights <- inventorsPatents[ , weight := .N, by = patent]
tables()
rm(list = setdiff(ls(), lsf.str()))
setwd("/home/nico/nfernand@princeton.edu/PhD - Big boy/Research/Endogenous growth with worker flows and noncompetes/data/work")
## Load libraries and auxiliary functions
library(readstata13)
library(dplyr)
library(plyr)
library(tidyr)
library(data.table)
source('Code/Functions/stata_merge.R')
##### Load in and clean patents dataset
patents <- read.dta13('Raw/pat76_06_assg.dta')
patents$year <- patents$appyear
patents <- patents %>% dplyr::rename(assigneeState = state, assigneeCountry = country)
patents <- patents %>% dplyr::select(patent,pdpass,year)
##### Load in and clean inventors datasets
# Use data.table::fread -- it is an order of magntiude faster than read.csv
inventors <- fread(file = "Raw/inventor.csv")
# Rename variables
inventors <- inventors %>% dplyr::rename(patent = Patent, inventorCountry = Country, inventorZipCode = Zipcode, inventorState = State, inventorCity = City)
# Convert patent # to numeric. Non-utility patents have non-numeric characters, so these become NAs
# and can then be dropped.
inventors$patent <- as.numeric(as.character(inventors$patent))
inventors$inventorState <- as.character(inventors$inventorState)
inventors <- inventors %>% dplyr::filter(!is.na(patent))
# Select only relevant variables: patent number and inventor state
inventors <- inventors %>% dplyr::select(patent,inventorState)
##### Merge datasets using data.table - order of magnitude faster than baseR merge or plyr::join
# To conserve memory, can define data.tables by reference! beautiful!
inventors <- data.table(inventors)
patents <- data.table(patents)
#setDT(inventors, keep.rownames = FALSE)
#setDT(patents, keep.rownames = FALSE)
setkey(inventors,patent)
setkey(patents,patent)
tables()
inventorsPatents <- merge(patents,inventors)
##### Clean up: remove inventors, patents data.tables
rm(list = c("inventors","patents"))
### Compute weights - easy with data.table
inventorsPatents[ , weight := .N, by = patent]
tables()
### Compute weights - easy with data.table
inventorsPatentsWeights <- copy(inventorsPatents[ , weight := .N, by = patent])
tables()
inventorsPatentsWeights$weight <- 1/inventorsPatentsWeights$weight
# clean up
rm(list=c("inventorsPatents"))
### Load in dynass, compustat and merge
## Load dynass
dynass <- read.dta13('Data/dynass_reshaped.dta')
# Clean
dynass$gvkey <- as.integer(dynass$gvkey)
dynass <- dynass %>% select(gvkey,pdpass,year)
## Merge inventorsPatentsWeights and dynass
# Prepare for merge
dynass <- data.table(dynass)
setkey(dynass,pdpass,year)
setkey(inventorsPatentsWeights,pdpass,year)
tables()
# Merge
inventorsPatentsWeightsDynass <- merge(inventorsPatentsWeights,dynass)
tables()
## Clean up: remove inventorsAndPatents and dynass
rm(list = c("inventorsPatentsWeights","dynass"))
#### Merge patentsAssigneesDynass with compustat's XRD data
## Load compustat dataset and clean
compustat <- read.dta13('Raw/compustat_annual.dta')
compustat <- compustat %>% select(gvkey,fyear,xrd,state)
compustat$year <- compustat$fyear
compustat$gvkey <- as.integer(compustat$gvkey)
## Merge and clean
# Convert compustat to data.table and set keys
compustat <- data.table(compustat)
tables()
setkey(compustat,gvkey,year)
setkey(inventorsPatentsWeightsDynass,gvkey,year)
inventorsPatentsWeightsCompustat <- merge(inventorsPatentsWeightsDynass,compustat,by = c("gvkey","year"),all.y = TRUE)
tables()
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
inventorsPatentsWeightsCompustat[, numPatents := .N, by = c("gvkey","year")]
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
inventorsPatentsWeightsCompustat <- inventorsPatentsWeightsCompustat[, numPatents := .N, by = c("gvkey","year")]
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
inventorsPatentsWeightsCompustat[, numPatents := .N, by = c("gvkey","year")]
rm(list = c("inventorsPatentsWeightsDynass","compustat"))
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
inventorsPatentsWeightsCompustat[, numPatents := .N, by = c("gvkey","year")]
?data.table
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
inventorsPatentsWeightsCompustat[, numPatents = .N, by = c("gvkey","year")]
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
inventorsPatentsWeightsCompustat[, numPatents := .N, by = c("gvkey","year")]
inventorsPatentsWeightsCompustat[,.N,by="year"]
inventorsPatentsWeightsCompustat[, numObsYear := .N,by="year"]
inventorsPatentsWeightsCompustat[, grp := .GRP,by="year"]
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
inventorsPatentsWeightsCompustat[, numPatents := .N, by = .(gvkey,year)]
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
temp <- inventorsPatentsWeightsCompustat[, numPatents := .N, by = .(gvkey,year)]
rm(list = setdiff(ls(), lsf.str()))
setwd("/home/nico/nfernand@princeton.edu/PhD - Big boy/Research/Endogenous growth with worker flows and noncompetes/data/work")
## Load libraries and auxiliary functions
library(readstata13)
library(dplyr)
library(plyr)
library(tidyr)
library(data.table)
##### Load in and clean patents dataset
patents <- read.dta13('Raw/pat76_06_assg.dta')
patents$year <- patents$appyear
patents <- patents %>% dplyr::rename(assigneeState = state, assigneeCountry = country)
patents <- patents %>% dplyr::select(patent,pdpass,year)
##### Load in and clean inventors datasets
# Use data.table::fread -- it is an order of magntiude faster than read.csv
inventors <- fread(file = "Raw/inventor.csv")
# Rename variables
inventors <- inventors %>% dplyr::rename(patent = Patent, inventorCountry = Country, inventorZipCode = Zipcode, inventorState = State, inventorCity = City)
# Convert patent # to numeric. Non-utility patents have non-numeric characters, so these become NAs
# and can then be dropped.
inventors$patent <- as.numeric(as.character(inventors$patent))
inventors$inventorState <- as.character(inventors$inventorState)
inventors <- inventors %>% dplyr::filter(!is.na(patent))
# Select only relevant variables: patent number and inventor state
inventors <- inventors %>% dplyr::select(patent,inventorState)
##### Merge datasets using data.table - order of magnitude faster than baseR merge or plyr::join
# To conserve memory, can define data.tables by reference! beautiful!
inventors <- data.table(inventors)
patents <- data.table(patents)
#setDT(inventors, keep.rownames = FALSE)
#setDT(patents, keep.rownames = FALSE)
setkey(inventors,patent)
setkey(patents,patent)
inventorsPatents <- merge(patents,inventors)
##### Clean up: remove inventors, patents data.tables
rm(list = c("inventors","patents"))
### Compute weights - easy with data.table
inventorsPatentsWeights <- copy(inventorsPatents[ , weight := .N, by = patent])
inventorsPatentsWeights$weight <- 1/inventorsPatentsWeights$weight
# clean up
rm(list=c("inventorsPatents"))
### Load in dynass, compustat and merge
## Load dynass
dynass <- read.dta13('Data/dynass_reshaped.dta')
# Clean
dynass$gvkey <- as.integer(dynass$gvkey)
dynass <- dynass %>% select(gvkey,pdpass,year)
## Merge inventorsPatentsWeights and dynass
# Prepare for merge
dynass <- data.table(dynass)
setkey(dynass,pdpass,year)
setkey(inventorsPatentsWeights,pdpass,year)
# Merge
inventorsPatentsWeightsDynass <- merge(inventorsPatentsWeights,dynass)
## Clean up: remove inventorsAndPatents and dynass
rm(list = c("inventorsPatentsWeights","dynass"))
#### Merge patentsAssigneesDynass with compustat's XRD data
## Load compustat dataset and clean
compustat <- read.dta13('Raw/compustat_annual.dta')
compustat <- compustat %>% select(gvkey,fyear,xrd,state)
compustat$year <- compustat$fyear
compustat$gvkey <- as.integer(compustat$gvkey)
## Merge and clean
# Convert compustat to data.table and set keys
compustat <- data.table(compustat)
setkey(compustat,gvkey,year)
setkey(inventorsPatentsWeightsDynass,gvkey,year)
inventorsPatentsWeightsCompustat <- merge(inventorsPatentsWeightsDynass,compustat,by = c("gvkey","year"),all.y = TRUE)
write.csv(inventorsPatentsWeightsCompustat, file = "Data/inventorsPatentsWeightsCompustat.csv")
fwrite(inventorsPatentsWeightsCompustat, file = "Data/inventorsPatentsWeightsCompustat_fwrite.csv")
fwrite(inventorsPatentsWeightsCompustat, file = "Data/inventorsPatentsWeightsCompustat.csv")
inventorsPatentsWeightsCompustat <- fread("Dara/inventorsPatentsWeightsCompustat.csv")
inventorsPatentsWeightsCompustat <- fread("Data/inventorsPatentsWeightsCompustat.csv")
rm(list = c("inventorsPatentsWeightsDynass","compustat"))
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
temp <- inventorsPatentsWeightsCompustat[, numPatents := .N, by = .(gvkey,year)]
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
temp <- inventorsPatentsWeightsCompustat[, numPatents := .N, by = .(gvkey,year)]
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
temp <- inventorsPatentsWeightsCompustat[, num_in_year := .N, by = year]
# Count number of patents per gvkey-year to modify weight so we can simply sum over gvkey-year entries later
temp <- inventorsPatentsWeightsCompustat[, num_in_year := .N, by = year]
View(temp)
rm(list = c("inventorsPatentsWeightsCompustat","temp"))
inventorsPatentsWeightsCompustat <- fread("Data/inventorsPatentsWeightsCompustat.csv")
inventorsPatentsWeightsCompustat[, numPatents := .N, by = .(gvkey,year)]
inventorsPatentsWeightsCompustat <- fread("Data/inventorsPatentsWeightsCompustat.csv")
View(inventorsPatentsWeightsCompustat)
inventorsPatentsWeightsCompustat[, numPatents := .N, by = .(gvkey,year)]
View(inventorsPatentsWeightsCompustat)
View(inventorsPatentsWeightsCompustat)
inventorsPatentsWeightsCompustat[, numRecordsPerYear := .N, by = year]
View(inventorsPatentsWeightsCompustat)
tables()
temp <- data.frame(inventorsPatentsWeightsCompustat)
temp <- data.table(temp)
DT = data.table(
ID = c("b","b","b","a","a","c"),
a = 1:6,
b = 7:12,
c = 13:18
)
DT[, numEntries := .N, by = ID]
temp <- DT
DT = data.table(group = c("b","b","b","a","a","c"))
DT[,numInGroup := .N, by = ID]
DT[,numInGroup := .N, by = group]
head(DT)
View(DT)
DT
DT[numInGroup := NULL]
DT[,numInGroup := NULL]
DT
DT[,numInGroup := .N, by = group]
head(DT)
DT2 <- DT
head(DT2)
DT[,totalnum := sum, by = group]
DT[,totalnum := sum(numInGroup), by = group]
DT
DT2 <- copy(DT)
DT <- copy(DT)
DT = data.table(group = c("b","b","b","a","a","c"))
DT[,numInGroup := .N, by = group]
DT <- DT
DT2 <- DT
DT <- DT2
rm(DT)
DT <- DT2
DT = data.table(group = c("b","b","b","a","a","c"))
DT[,numInGroup := .N, by = group]
DT = 1
DT = data.table(group = c("b","b","b","a","a","c"))
DT[,numInGroup := .N, by = group]
DT = data.table(group = c("b","b","b","a","a","c"))
DT[,numInGroup := .N, by = group]
DT = data.table(group = c("b","b","b","a","a","c","d"))
DT = data.table(group = c("b","b","b","a","a","c"))
DT[,numInGroup := .N, by = group]
DT2 <- DT
DT <- DT2
DT2 = data.table(group = c("b","b","b","a","a","c","d"))
DT <- DT2
x = 5
dt <- DT
