View(firmsTickers)
source('~/nfernand@princeton.edu/PhD - Thesis/Research/Endogenous-growth-with-spinouts/empirics/code/linkBiosToCompustat.R', echo=TRUE)
#------------------------------------------------#
#
# File name: linkBiosToCompustat.R
#
# Author: Nicolas Fernandez-Arias
#
# Purpose:
#
# This script links EntityNames to the Compustat database
# to find parent firms.
#------------------------------------------------#
rm(list = ls())
library(data.table)
compustatFirmsSegments <- fread("data/compustat/firmsSegments.csv")
compustatFirmsSegments[tic == "IBM", conml := "IBM"]
compustatFirmsSegments[tic == "GS", conml := "Goldman Sachs"]
compustatFirmsSegments[tic == "HPQ", conml := "Hewlett-Packard"]
# select segments
segments <- compustatFirmsSegments[snms != ""]
segments <- segments[ gvkey != 17997 | snms != "AT&T"]
EntitiesPrevEmployers <- fread("data/VentureSource/EntitiesPrevEmployers.csv")
## Select only founders
####
# Count CEO-Chairman and CTOs as founders when no founder listed
#EntitiesPrevEmployers[, Founder2 := 1 - max(Founder), by = EntityID]
#EntitiesPrevEmployers[Founder2 == 1 & (TitleCode == "CTO" | TitleCode == "CCEO"), Founder := 1]
# Select founders
#EntitiesPrevEmployers <- EntitiesPrevEmployers[Founder == 1]
EntitiesPrevEmployers <- EntitiesPrevEmployers[!is.na(PreviousEmployer) & PreviousEmployer != ""]
# Set weights to take into account multiple founders at same firm - to not overcount spinouts
# i.e. this way if we aggregate spinout measure across firms, we get the total number of spinouts
EntitiesPrevEmployers[, Weight := 1 / .N, by = EntityID]
## Prepare data
compustatFirmsSegments <- compustatFirmsSegments[ , .(gvkey,conml,snms,tic)]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("[.]$","",conml), by = gvkey]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",conml), by = gvkey]
#PrevEmployers <- unique(EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)], by = "PreviousEmployer")
#rm(EntitiesPrevEmployers)
EntitiesPrevEmployers <- EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,FirstName,LastName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)]
EntitiesPrevEmployers[ PreviousEmployer == "Cisco", PreviousEmployer := "Cisco Systems"]
EntitiesPrevEmployers[ PreviousEmployer == "Amazon", PreviousEmployer := "Amazon.com"]
EntitiesPrevEmployers[ PreviousEmployer == "Yahoo" | PreviousEmployer == "Yahoo!", PreviousEmployer := "Verizon"]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( )?(_x000D_)?(\n)?( )?(_x000D_)?(\n)?( )?_x000D_\n$","",PreviousEmployer), by = PreviousEmployer]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[.]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[ ]?[(].*[)]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("^Google.*$","Google",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
# Set everything to upper case for easier matching
compustatFirmsSegments[, snms := toupper(snms)]
compustatFirmsSegments[, conml := toupper(conml)]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := toupper(PreviousEmployerCLEAN)]
#PrevEmployers <- unique(PrevEmployers, by = "PreviousEmployerCLEAN")
# Match first to parent firms via business divisions, using segments data from Compustat
setkey(segments,snms)
setkey(EntitiesPrevEmployers,PreviousEmployerCLEAN)
output <- segments[EntitiesPrevEmployers]
#output <- EntitiesPrevEmployers[segments]
#outputFuzzy <- PrevEmployers[1:5000] %>% stringdist_inner_join(segments, by = c(PreviousEmployer = "snms"), method = c("lv"), max_dist = 1, distance_col = "distance")
output <- output[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
# Analyze output
#output[, PrevEmployerSpinoutCount := sum(Weight), by = .(snms)]
# Next, match to parent firms directly
firms <- unique(compustatFirmsSegments, by = "gvkey")
firms[, snms := NA]
setkey(firms,conml)
output2 <- firms[EntitiesPrevEmployers]
output2 <- output2[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
#output2[, PrevEmployerSpinoutCount := sum(Weight), by = .(conml)]
output3 <- unique(rbind(output2,output),by = c("gvkey","EntityID","FirstName","LastName","JoinDate","StartDate"))
output <- rbind(output[!is.na(gvkey)],output2[!is.na(gvkey)])
output2 <- rbind(output[is.na(gvkey)],output2[is.na(gvkey)])
temp <- output2[, .N, by = conml]
temp2 <- output[, .N, by = conml]
fwrite(temp[order(-N)],"code/company_list.csv")
####################################
## Merge in additional previous employers using
# ticker symbols, obtained through scraping Google search results
####################################
# Use firmsTickers to match firms that are not matched by name
firmsTickers <- fread("data/firmsTickersClean.csv")
# merge with firms database using ticker symbol
setkey(firmsTickers,tic)
setkey(firms,tic)
firmsTickersGvkeys <- firms[firmsTickers]
# merge with EntitiesPrevEmployers and append to output
setkey(firmsTickersGvkeys,firmName)
temp3 <- firmsTickersGvkeys[EntitiesPrevEmployers][!is.na(gvkey)]
temp3 <- temp3[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
View(temp3)
#------------------------------------------------#
#
# File name: linkBiosToCompustat.R
#
# Author: Nicolas Fernandez-Arias
#
# Purpose:
#
# This script links EntityNames to the Compustat database
# to find parent firms.
#------------------------------------------------#
rm(list = ls())
library(data.table)
compustatFirmsSegments <- fread("data/compustat/firmsSegments.csv")
compustatFirmsSegments[tic == "IBM", conml := "IBM"]
compustatFirmsSegments[tic == "GS", conml := "Goldman Sachs"]
compustatFirmsSegments[tic == "HPQ", conml := "Hewlett-Packard"]
# select segments
segments <- compustatFirmsSegments[snms != ""]
segments <- segments[ gvkey != 17997 | snms != "AT&T"]
EntitiesPrevEmployers <- fread("data/VentureSource/EntitiesPrevEmployers.csv")
## Select only founders
####
# Count CEO-Chairman and CTOs as founders when no founder listed
#EntitiesPrevEmployers[, Founder2 := 1 - max(Founder), by = EntityID]
#EntitiesPrevEmployers[Founder2 == 1 & (TitleCode == "CTO" | TitleCode == "CCEO"), Founder := 1]
# Select founders
#EntitiesPrevEmployers <- EntitiesPrevEmployers[Founder == 1]
EntitiesPrevEmployers <- EntitiesPrevEmployers[!is.na(PreviousEmployer) & PreviousEmployer != ""]
# Set weights to take into account multiple founders at same firm - to not overcount spinouts
# i.e. this way if we aggregate spinout measure across firms, we get the total number of spinouts
EntitiesPrevEmployers[, Weight := 1 / .N, by = EntityID]
## Prepare data
compustatFirmsSegments <- compustatFirmsSegments[ , .(gvkey,conml,snms,tic)]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("[.]$","",conml), by = gvkey]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",conml), by = gvkey]
#PrevEmployers <- unique(EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)], by = "PreviousEmployer")
#rm(EntitiesPrevEmployers)
EntitiesPrevEmployers <- EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,FirstName,LastName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)]
EntitiesPrevEmployers[ PreviousEmployer == "Cisco", PreviousEmployer := "Cisco Systems"]
EntitiesPrevEmployers[ PreviousEmployer == "Amazon", PreviousEmployer := "Amazon.com"]
EntitiesPrevEmployers[ PreviousEmployer == "Yahoo" | PreviousEmployer == "Yahoo!", PreviousEmployer := "Verizon"]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( )?(_x000D_)?(\n)?( )?(_x000D_)?(\n)?( )?_x000D_\n$","",PreviousEmployer), by = PreviousEmployer]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[.]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[ ]?[(].*[)]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("^Google.*$","Google",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
# Set everything to upper case for easier matching
compustatFirmsSegments[, snms := toupper(snms)]
compustatFirmsSegments[, conml := toupper(conml)]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := toupper(PreviousEmployerCLEAN)]
#PrevEmployers <- unique(PrevEmployers, by = "PreviousEmployerCLEAN")
# Match first to parent firms via business divisions, using segments data from Compustat
setkey(segments,snms)
setkey(EntitiesPrevEmployers,PreviousEmployerCLEAN)
output <- segments[EntitiesPrevEmployers]
#output <- EntitiesPrevEmployers[segments]
#outputFuzzy <- PrevEmployers[1:5000] %>% stringdist_inner_join(segments, by = c(PreviousEmployer = "snms"), method = c("lv"), max_dist = 1, distance_col = "distance")
output <- output[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
# Analyze output
#output[, PrevEmployerSpinoutCount := sum(Weight), by = .(snms)]
# Next, match to parent firms directly
firms <- unique(compustatFirmsSegments, by = "gvkey")
firms[, snms := NA]
setkey(firms,conml)
output2 <- firms[EntitiesPrevEmployers]
output2 <- output2[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
#output2[, PrevEmployerSpinoutCount := sum(Weight), by = .(conml)]
output3 <- unique(rbind(output2,output),by = c("gvkey","EntityID","FirstName","LastName","JoinDate","StartDate"))
output <- rbind(output[!is.na(gvkey)],output2[!is.na(gvkey)])
output2 <- rbind(output[is.na(gvkey)],output2[is.na(gvkey)])
temp <- output2[, .N, by = conml]
temp2 <- output[, .N, by = conml]
fwrite(temp[order(-N)],"code/company_list.csv")
####################################
## Merge in additional previous employers using
# ticker symbols, obtained through scraping Google search results
####################################
# Use firmsTickers to match firms that are not matched by name
firmsTickers <- fread("data/firmsTickersClean.csv")
# merge with firms database using ticker symbol
setkey(firmsTickers,tic)
setkey(firms,tic)
firmsTickersGvkeys <- firms[firmsTickers]
# merge with EntitiesPrevEmployers and append to output
setkey(firmsTickersGvkeys,firmName)
temp3 <- firmsTickersGvkeys[EntitiesPrevEmployers][!is.na(gvkey)]
temp3 <- temp3[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
output <- unique(rbind(output,temp3), by = c("gvkey","EntityID","FirstName","LastName","JoinDate","StartDate"))
source('~/nfernand@princeton.edu/PhD - Thesis/Research/Endogenous-growth-with-spinouts/empirics/code/linkBiosToCompustat.R', echo=TRUE)
# Construct database of spinouts and their attributes:
# e.g. (1) whether they achieve revenue, (2) how much funding they receive, (3) whether they IPO, (4) IPO market capitalization
source("code/constructSpinoutAttributes.R")
# Next, do some basic analyses
source("code/basicSpinoutAnalysis.R")
# Construct parentFirm-year spinout counts and spinout indicator
# (for now, not considering industry)
source("code/constructSpinoutCounts.R")
# Combine with data on R&D from c ompustat_annual
source("code/mergeRDwithSpinoutCounts.R")
source("code/mergePatents_RD-Spinouts.R")
# Next, prepare the data for panel regressions in Stata
source("code/prepareDataForStata.R")
#------------------------------------------------#
#
# File name: linkBiosToCompustat.R
#
# Author: Nicolas Fernandez-Arias
#
# Purpose:
#
# This script links EntityNames to the Compustat database
# to find parent firms.
#------------------------------------------------#
rm(list = ls())
library(data.table)
compustatFirmsSegments <- fread("data/compustat/firmsSegments.csv")
compustatFirmsSegments[tic == "IBM", conml := "IBM"]
compustatFirmsSegments[tic == "GS", conml := "Goldman Sachs"]
compustatFirmsSegments[tic == "HPQ", conml := "Hewlett-Packard"]
# select segments
segments <- compustatFirmsSegments[snms != ""]
segments <- segments[ gvkey != 17997 | snms != "AT&T"]
EntitiesPrevEmployers <- fread("data/VentureSource/EntitiesPrevEmployers.csv")
## Select only founders
####
# Count CEO-Chairman and CTOs as founders when no founder listed
#EntitiesPrevEmployers[, Founder2 := 1 - max(Founder), by = EntityID]
#EntitiesPrevEmployers[Founder2 == 1 & (TitleCode == "CTO" | TitleCode == "CCEO"), Founder := 1]
# Select founders
#EntitiesPrevEmployers <- EntitiesPrevEmployers[Founder == 1]
EntitiesPrevEmployers <- EntitiesPrevEmployers[!is.na(PreviousEmployer) & PreviousEmployer != ""]
# Set weights to take into account multiple founders at same firm - to not overcount spinouts
# i.e. this way if we aggregate spinout measure across firms, we get the total number of spinouts
EntitiesPrevEmployers[, Weight := 1 / .N, by = EntityID]
## Prepare data
compustatFirmsSegments <- compustatFirmsSegments[ , .(gvkey,conml,snms,tic)]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("[.]$","",conml), by = gvkey]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",conml), by = gvkey]
#PrevEmployers <- unique(EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)], by = "PreviousEmployer")
#rm(EntitiesPrevEmployers)
EntitiesPrevEmployers <- EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,FirstName,LastName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)]
EntitiesPrevEmployers[ PreviousEmployer == "Cisco", PreviousEmployer := "Cisco Systems"]
EntitiesPrevEmployers[ PreviousEmployer == "Amazon", PreviousEmployer := "Amazon.com"]
EntitiesPrevEmployers[ PreviousEmployer == "Yahoo" | PreviousEmployer == "Yahoo!", PreviousEmployer := "Verizon"]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( )?(_x000D_)?(\n)?( )?(_x000D_)?(\n)?( )?_x000D_\n$","",PreviousEmployer), by = PreviousEmployer]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[.]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[ ]?[(].*[)]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("^Google.*$","Google",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
#------------------------------------------------#
#
# File name: linkBiosToCompustat.R
#
# Author: Nicolas Fernandez-Arias
#
# Purpose:
#
# This script links EntityNames to the Compustat database
# to find parent firms.
#------------------------------------------------#
rm(list = ls())
library(data.table)
compustatFirmsSegments <- fread("data/compustat/firmsSegments.csv")
compustatFirmsSegments[tic == "IBM", conml := "IBM"]
compustatFirmsSegments[tic == "GS", conml := "Goldman Sachs"]
compustatFirmsSegments[tic == "HPQ", conml := "Hewlett-Packard"]
# select segments
segments <- compustatFirmsSegments[snms != ""]
segments <- segments[ gvkey != 17997 | snms != "AT&T"]
EntitiesPrevEmployers <- fread("data/VentureSource/EntitiesPrevEmployers.csv")
## Select only founders
####
# Count CEO-Chairman and CTOs as founders when no founder listed
#EntitiesPrevEmployers[, Founder2 := 1 - max(Founder), by = EntityID]
#EntitiesPrevEmployers[Founder2 == 1 & (TitleCode == "CTO" | TitleCode == "CCEO"), Founder := 1]
# Select founders
#EntitiesPrevEmployers <- EntitiesPrevEmployers[Founder == 1]
EntitiesPrevEmployers <- EntitiesPrevEmployers[!is.na(PreviousEmployer) & PreviousEmployer != ""]
# Set weights to take into account multiple founders at same firm - to not overcount spinouts
# i.e. this way if we aggregate spinout measure across firms, we get the total number of spinouts
EntitiesPrevEmployers[, Weight := 1 / .N, by = EntityID]
## Prepare data
compustatFirmsSegments <- compustatFirmsSegments[ , .(gvkey,conml,snms,tic)]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("[.]$","",conml), by = gvkey]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",conml), by = gvkey]
#PrevEmployers <- unique(EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)], by = "PreviousEmployer")
#rm(EntitiesPrevEmployers)
EntitiesPrevEmployers <- EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,FirstName,LastName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)]
EntitiesPrevEmployers[ PreviousEmployer == "Cisco", PreviousEmployer := "Cisco Systems"]
EntitiesPrevEmployers[ PreviousEmployer == "Amazon", PreviousEmployer := "Amazon.com"]
EntitiesPrevEmployers[ PreviousEmployer == "Yahoo" | PreviousEmployer == "Yahoo!", PreviousEmployer := "Verizon"]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( )?(_x000D_)?(\n)?( )?(_x000D_)?(\n)?( )?_x000D_\n$","",PreviousEmployer), by = PreviousEmployer]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[.]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[ ]?[(].*[)]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("^Google.*$","Google",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
# Set everything to upper case for easier matching
#compustatFirmsSegments[, snms := toupper(snms)]
#compustatFirmsSegments[, conml := toupper(conml)]
#EntitiesPrevEmployers[ , PreviousEmployerCLEAN := toupper(PreviousEmployerCLEAN)]
#PrevEmployers <- unique(PrevEmployers, by = "PreviousEmployerCLEAN")
# Match first to parent firms via business divisions, using segments data from Compustat
setkey(segments,snms)
setkey(EntitiesPrevEmployers,PreviousEmployerCLEAN)
output <- segments[EntitiesPrevEmployers]
#output <- EntitiesPrevEmployers[segments]
#outputFuzzy <- PrevEmployers[1:5000] %>% stringdist_inner_join(segments, by = c(PreviousEmployer = "snms"), method = c("lv"), max_dist = 1, distance_col = "distance")
output <- output[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
# Analyze output
#output[, PrevEmployerSpinoutCount := sum(Weight), by = .(snms)]
# Next, match to parent firms directly
firms <- unique(compustatFirmsSegments, by = "gvkey")
firms[, snms := NA]
setkey(firms,conml)
output2 <- firms[EntitiesPrevEmployers]
output2 <- output2[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
#output2[, PrevEmployerSpinoutCount := sum(Weight), by = .(conml)]
output3 <- unique(rbind(output2,output),by = c("gvkey","EntityID","FirstName","LastName","JoinDate","StartDate"))
output <- rbind(output[!is.na(gvkey)],output2[!is.na(gvkey)])
output2 <- rbind(output[is.na(gvkey)],output2[is.na(gvkey)])
temp <- output2[, .N, by = conml]
temp2 <- output[, .N, by = conml]
fwrite(temp[order(-N)],"code/company_list.csv")
####################################
## Merge in additional previous employers using
# ticker symbols, obtained through scraping Google search results
####################################
# Use firmsTickers to match firms that are not matched by name
firmsTickers <- fread("data/firmsTickersClean.csv")
# merge with firms database using ticker symbol
setkey(firmsTickers,tic)
setkey(firms,tic)
firmsTickersGvkeys <- firms[firmsTickers]
# merge with EntitiesPrevEmployers and append to output
setkey(firmsTickersGvkeys,firmName)
temp3 <- firmsTickersGvkeys[EntitiesPrevEmployers][!is.na(gvkey)]
temp3 <- temp3[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
test <- temp3
test_output <- output
#------------------------------------------------#
#
# File name: linkBiosToCompustat.R
#
# Author: Nicolas Fernandez-Arias
#
# Purpose:
#
# This script links EntityNames to the Compustat database
# to find parent firms.
#------------------------------------------------#
rm(list = ls())
library(data.table)
compustatFirmsSegments <- fread("data/compustat/firmsSegments.csv")
compustatFirmsSegments[tic == "IBM", conml := "IBM"]
compustatFirmsSegments[tic == "GS", conml := "Goldman Sachs"]
compustatFirmsSegments[tic == "HPQ", conml := "Hewlett-Packard"]
# select segments
segments <- compustatFirmsSegments[snms != ""]
segments <- segments[ gvkey != 17997 | snms != "AT&T"]
EntitiesPrevEmployers <- fread("data/VentureSource/EntitiesPrevEmployers.csv")
## Select only founders
####
# Count CEO-Chairman and CTOs as founders when no founder listed
#EntitiesPrevEmployers[, Founder2 := 1 - max(Founder), by = EntityID]
#EntitiesPrevEmployers[Founder2 == 1 & (TitleCode == "CTO" | TitleCode == "CCEO"), Founder := 1]
# Select founders
#EntitiesPrevEmployers <- EntitiesPrevEmployers[Founder == 1]
EntitiesPrevEmployers <- EntitiesPrevEmployers[!is.na(PreviousEmployer) & PreviousEmployer != ""]
# Set weights to take into account multiple founders at same firm - to not overcount spinouts
# i.e. this way if we aggregate spinout measure across firms, we get the total number of spinouts
EntitiesPrevEmployers[, Weight := 1 / .N, by = EntityID]
## Prepare data
compustatFirmsSegments <- compustatFirmsSegments[ , .(gvkey,conml,snms,tic)]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("[.]$","",conml), by = gvkey]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",conml), by = gvkey]
#PrevEmployers <- unique(EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)], by = "PreviousEmployer")
#rm(EntitiesPrevEmployers)
EntitiesPrevEmployers <- EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,FirstName,LastName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)]
EntitiesPrevEmployers[ PreviousEmployer == "Cisco", PreviousEmployer := "Cisco Systems"]
EntitiesPrevEmployers[ PreviousEmployer == "Amazon", PreviousEmployer := "Amazon.com"]
EntitiesPrevEmployers[ PreviousEmployer == "Yahoo" | PreviousEmployer == "Yahoo!", PreviousEmployer := "Verizon"]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( )?(_x000D_)?(\n)?( )?(_x000D_)?(\n)?( )?_x000D_\n$","",PreviousEmployer), by = PreviousEmployer]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[.]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[ ]?[(].*[)]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("^Google.*$","Google",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
# Set everything to upper case for easier matching
compustatFirmsSegments[, snms := toupper(snms)]
compustatFirmsSegments[, conml := toupper(conml)]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := toupper(PreviousEmployerCLEAN)]
#PrevEmployers <- unique(PrevEmployers, by = "PreviousEmployerCLEAN")
# Match first to parent firms via business divisions, using segments data from Compustat
setkey(segments,snms)
setkey(EntitiesPrevEmployers,PreviousEmployerCLEAN)
output <- segments[EntitiesPrevEmployers]
#output <- EntitiesPrevEmployers[segments]
#outputFuzzy <- PrevEmployers[1:5000] %>% stringdist_inner_join(segments, by = c(PreviousEmployer = "snms"), method = c("lv"), max_dist = 1, distance_col = "distance")
output <- output[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
# Analyze output
#output[, PrevEmployerSpinoutCount := sum(Weight), by = .(snms)]
# Next, match to parent firms directly
firms <- unique(compustatFirmsSegments, by = "gvkey")
firms[, snms := NA]
setkey(firms,conml)
output2 <- firms[EntitiesPrevEmployers]
output2 <- output2[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
#output2[, PrevEmployerSpinoutCount := sum(Weight), by = .(conml)]
output3 <- unique(rbind(output2,output),by = c("gvkey","EntityID","FirstName","LastName","JoinDate","StartDate"))
output <- rbind(output[!is.na(gvkey)],output2[!is.na(gvkey)])
output2 <- rbind(output[is.na(gvkey)],output2[is.na(gvkey)])
temp <- output2[, .N, by = conml]
temp2 <- output[, .N, by = conml]
fwrite(temp[order(-N)],"code/company_list.csv")
####################################
## Merge in additional previous employers using
# ticker symbols, obtained through scraping Google search results
####################################
# Use firmsTickers to match firms that are not matched by name
firmsTickers <- fread("data/firmsTickersClean.csv")
# merge with firms database using ticker symbol
setkey(firmsTickers,tic)
setkey(firms,tic)
firmsTickersGvkeys <- firms[firmsTickers]
# merge with EntitiesPrevEmployers and append to output
setkey(firmsTickersGvkeys,firmName)
temp3 <- firmsTickersGvkeys[EntitiesPrevEmployers][!is.na(gvkey)]
temp3 <- temp3[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
test_temp <- temp3
test_output <- output
test_outpu2 <- output2
rm(compustatFirmsSegments)
rm(EntitiesPrevEmployers)
rm(firms)
rm(ffirmsTickers)
rm(firmsTickers)
rm(firmsTickersGvkeys)
rm(output)
rm(output2)
rm(output3)
rm(segments)
rm(temp)
rm(temp3)
rm(temp2)
compustatFirmsSegments <- fread("data/compustat/firmsSegments.csv")
compustatFirmsSegments[tic == "IBM", conml := "IBM"]
compustatFirmsSegments[tic == "GS", conml := "Goldman )Sachs"]
compustatFirmsSegments[tic == "HPQ", conml := "Hewlett-Packard"]
# select segments
segments <- compustatFirmsSegments[snms != ""]
segments <- segments[ gvkey != 17997 | snms != "AT&T"]
EntitiesPrevEmployers <- fread("data/VentureSource/EntitiesPrevEmployers.csv")
## Select only founders
####
# Count CEO-Chairman and CTOs as founders when no founder listed
#EntitiesPrevEmployers[, Founder2 := 1 - max(Founder), by = EntityID]
#EntitiesPrevEmployers[Founder2 == 1 & (TitleCode == "CTO" | TitleCode == "CCEO"), Founder := 1]
# Select founders
#EntitiesPrevEmployers <- EntitiesPrevEmployers[Founder == 1]
EntitiesPrevEmployers <- EntitiesPrevEmployers[!is.na(PreviousEmployer) & PreviousEmployer != ""]
# Set weights to take into account multiple founders at same firm - to not overcount spinouts
# i.e. this way if we aggregate spinout measure across firms, we get the total number of spinouts
EntitiesPrevEmployers[, Weight := 1 / .N, by = EntityID]
## Prepare data
compustatFirmsSegments <- compustatFirmsSegments[ , .(gvkey,conml,snms,tic)]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("[.]$","",conml), by = gvkey]
compustatFirmsSegments <- compustatFirmsSegments[ , conml := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",conml), by = gvkey]
#PrevEmployers <- unique(EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)], by = "PreviousEmployer")
#rm(EntitiesPrevEmployers)
EntitiesPrevEmployers <- EntitiesPrevEmployers[, .(Weight,EntityID,EntityName,FirstName,LastName,JoinDate,StartDate,Title,TitleCode,PreviousEmployer)]
EntitiesPrevEmployers[ PreviousEmployer == "Cisco", PreviousEmployer := "Cisco Systems"]
EntitiesPrevEmployers[ PreviousEmployer == "Amazon", PreviousEmployer := "Amazon.com"]
EntitiesPrevEmployers[ PreviousEmployer == "Yahoo" | PreviousEmployer == "Yahoo!", PreviousEmployer := "Verizon"]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( )?(_x000D_)?(\n)?( )?(_x000D_)?(\n)?( )?_x000D_\n$","",PreviousEmployer), by = PreviousEmployer]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[.]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("( Inc| Corp| LLC| Ltd| Co| LP)$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("[ ]?[(].*[)]$","",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
EntitiesPrevEmployers[ , PreviousEmployerCLEAN := gsub("^Google.*$","Google",PreviousEmployerCLEAN), by = PreviousEmployerCLEAN]
# Set everything to upper case for easier matching
#compustatFirmsSegments[, snms := toupper(snms)]
#compustatFirmsSegments[, conml := toupper(conml)]
#EntitiesPrevEmployers[ , PreviousEmployerCLEAN := toupper(PreviousEmployerCLEAN)]
#PrevEmployers <- unique(PrevEmployers, by = "PreviousEmployerCLEAN")
# Match first to parent firms via business divisions, using segments data from Compustat
setkey(segments,snms)
setkey(EntitiesPrevEmployers,PreviousEmployerCLEAN)
output <- segments[EntitiesPrevEmployers]
#output <- EntitiesPrevEmployers[segments]
#outputFuzzy <- PrevEmployers[1:5000] %>% stringdist_inner_join(segments, by = c(PreviousEmployer = "snms"), method = c("lv"), max_dist = 1, distance_col = "distance")
output <- output[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
# Analyze output
#output[, PrevEmployerSpinoutCount := sum(Weight), by = .(snms)]
# Next, match to parent firms directly
firms <- unique(compustatFirmsSegments, by = "gvkey")
firms[, snms := NA]
setkey(firms,conml)
output2 <- firms[EntitiesPrevEmployers]
output2 <- output2[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
#output2[, PrevEmployerSpinoutCount := sum(Weight), by = .(conml)]
output3 <- unique(rbind(output2,output),by = c("gvkey","EntityID","FirstName","LastName","JoinDate","StartDate"))
output <- rbind(output[!is.na(gvkey)],output2[!is.na(gvkey)])
output2 <- rbind(output[is.na(gvkey)],output2[is.na(gvkey)])
temp <- output2[, .N, by = conml]
temp2 <- output[, .N, by = conml]
fwrite(temp[order(-N)],"code/company_list.csv")
####################################
## Merge in additional previous employers using
# ticker symbols, obtained through scraping Google search results
####################################
# Use firmsTickers to match firms that are not matched by name
firmsTickers <- fread("data/firmsTickersClean.csv")
# merge with firms database using ticker symbol
setkey(firmsTickers,tic)
setkey(firms,tic)
firmsTickersGvkeys <- firms[firmsTickers]
# merge with EntitiesPrevEmployers and append to output
setkey(firmsTickersGvkeys,firmName)
temp3 <- firmsTickersGvkeys[EntitiesPrevEmployers][!is.na(gvkey)]
temp3 <- temp3[ , .(gvkey,conml,snms,tic,PreviousEmployer,EntityID,EntityName,Weight,FirstName,LastName,JoinDate,StartDate)]
View(output)
View(test_output)
