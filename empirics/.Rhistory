data <- fread("hello.csv")
data <- fread("hello.csv")
library(data.table)
rm(list = ls())
setwd("~/nfernand@princeton.edu/PhD - Thesis/Research/Endogenous-growth-with-spinouts/empirics")
rm(list = ls())
compustat <- fread("raw/compustat/compustat_annual.csv")
compustat <- compustat[indfmt=="INDL" & datafmt=="STD" & popsrc=="D" & consol=="C"]
compustat <- compustat[ , .(gvkey,fyear,datadate,state,xrd,capx,capxv,sppe,ppent,emp,revt,intan,act,sic,naics)]
compustat <- compustat[!is.na(fyear)]
parentsSpinoutCounts <- fread("data/parentsSpinoutCounts.csv")
setkey(compustat,gvkey,fyear)
setkey(parentsSpinoutCounts,gvkey,year)
output <- parentsSpinoutCounts[compustat]
output[is.na(spinoutCount) == TRUE, spinoutCount := 0]
output[is.na(spinoutCountUnweighted) == TRUE, spinoutCountUnweighted := 0]
output[is.na(spinoutCountUnweighted_onlyExits) == TRUE, spinoutCountUnweighted_onlyExits := 0]
output[is.na(spinoutsDiscountedExitValue) == TRUE, spinoutsDiscountedExitValue := 0]
output[is.na(spinoutCountUnweighted_discountedByTimeToExit) == TRUE, spinoutCountUnweighted_discountedByTimeToExit := 0]
output[is.na(spinoutsDiscountedFFValue) == TRUE, spinoutsDiscountedFFValue := 0]
output[is.na(spinouts_wso1), spinouts_wso1 := 0]
output[is.na(spinouts_wso2), spinouts_wso2 := 0]
output[is.na(spinouts_wso3), spinouts_wso3 := 0]
output[is.na(spinouts_wso4), spinouts_wso4 := 0]
output[is.na(spinouts_wso5), spinouts_wso5 := 0]
output[is.na(spinouts_wso6), spinouts_wso6 := 0]
output[is.na(spinoutsUnweighted_wso1), spinoutsUnweighted_wso1 := 0]
output[is.na(spinoutsUnweighted_wso2), spinoutsUnweighted_wso2 := 0]
output[is.na(spinoutsUnweighted_wso3), spinoutsUnweighted_wso3 := 0]
output[is.na(spinoutsUnweighted_wso4), spinoutsUnweighted_wso4 := 0]
output[is.na(spinoutsUnweighted_wso5), spinoutsUnweighted_wso5 := 0]
output[is.na(spinoutsUnweighted_wso6), spinoutsUnweighted_wso6 := 0]
output[is.na(spinoutsDFFV_wso1), spinoutsDFFV_wso1 := 0]
output[is.na(spinoutsDFFV_wso2), spinoutsDFFV_wso2 := 0]
output[is.na(spinoutsDFFV_wso3), spinoutsDFFV_wso3 := 0]
output[is.na(spinoutsDFFV_wso4), spinoutsDFFV_wso4 := 0]
output[is.na(spinoutsDFFV_wso5), spinoutsDFFV_wso5 := 0]
output[is.na(spinoutsDFFV_wso6), spinoutsDFFV_wso6 := 0]
output[spinoutCountUnweighted >= 1 , spinoutIndicator := 1]
output[spinoutCountUnweighted == 0, spinoutIndicator := 0]
output[spinoutCountUnweighted_onlyExits >= 1 , exitSpinoutIndicator := 1]
output[spinoutCountUnweighted_onlyExits == 0, exitSpinoutIndicator := 0]
output[spinoutsDiscountedExitValue >= 0.43 , valuableSpinoutIndicator := 1]
output[spinoutsDiscountedExitValue < 0.43, valuableSpinoutIndicator := 0]
fwrite(output,"data/compustat-spinouts.csv")
rm(list = ls())
library(data.table)
data <- fread("data/compustat-spinouts.csv")
# Set NA xrd values to zero
data[is.na(xrd), xrd := 0]
data[is.na(capxv), capxv := 0]
data[is.na(sppe), sppe := 0]
## Compute moving averages
data[, xrd_3 := Reduce(`+`, shift(xrd, 0L:2L, type = "lag")), by = gvkey]
data[, xrd_5 := Reduce(`+`, shift(xrd, 0L:4L, type = "lag")), by = gvkey]
data[, xrd_ma3 := (1/3) * Reduce(`+`, shift(xrd, 0L:2L, type = "lag")), by = gvkey]
data[, xrd_lag1 := shift(xrd, 1L, type = "lag"), by = gvkey]
data[, patentApplicationCount_3 := Reduce(`+`, shift(patentApplicationCount, 0L:2L, type = "lag")), by = gvkey]
data[, patentApplicationCount_5 := Reduce(`+`, shift(patentApplicationCount, 0L:4L, type = "lag")), by = gvkey]
data[, patentApplicationCount_CW_3 := Reduce(`+`, shift(patentApplicationCount_CW, 0L:2L, type = "lag")), by = gvkey]
data[, patentApplicationCount_CW_5 := Reduce(`+`, shift(patentApplicationCount_CW, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_3 := Reduce(`+`, shift(patentCount, 0L:2L, type = "lag")), by = gvkey]
data[, patentCount_5 :=  Reduce(`+`, shift(patentCount, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_CW_3 :=  Reduce(`+`, shift(patentCount_CW, 0L:2L, type = "lag")), by = gvkey]
data[, patentCount_CW_5 :=  Reduce(`+`, shift(patentCount_CW, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_CW_cumulative_ma5 := (1/5) *  Reduce(`+`, shift(patentCount_CW_cumulative, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_cumulative_ma5 :=  (1/5) * Reduce(`+`, shift(patentCount_cumulative, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutCountUnweighted_2 :=  Reduce(`+`, shift(spinoutCountUnweighted, 0L:1L, type = "lag")), by = gvkey]
data[, spinoutCountUnweighted_3 :=  Reduce(`+`, shift(spinoutCountUnweighted, 0L:2L, type = "lag")), by = gvkey]
data[, spinoutCountUnweighted_5 := Reduce(`+`, shift(spinoutCountUnweighted, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutsDiscountedExitValue_5 := Reduce(`+`, shift(spinoutsDiscountedExitValue, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutsDiscountedFFValue_5 := Reduce(`+`, shift(spinoutsDiscountedFFValue, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutCount_2 :=  Reduce(`+`, shift(spinoutCount, 0L:1L, type = "lag")), by = gvkey]
data[, spinoutCount_3 := Reduce(`+`, shift(spinoutCount, 0L:2L, type = "lag")), by = gvkey]
data[, spinoutCount_5 := Reduce(`+`, shift(spinoutCount, 0L:4L, type = "lag")), by = gvkey]
data[, emp_ma5 := (1/5) * Reduce(`+`, shift(emp, 0L:4L, type = "lag")), by = gvkey]
data[, emp_lag1 := shift(emp, 1L, type = "lag"), by = gvkey]
data[ , ppent_lag1 := shift(ppent, 1L, type = "lag") , by = gvkey]
data[, investmentRate := (capxv - sppe) / ppent_lag1]
data[, xrdRate := xrd / ppent_lag1]
data[, revProd := revt / emp]
# Combine with data on R&D from c ompustat_annual
source("code/mergeRDwithSpinoutCounts.R")
source("code/mergePatents_RD-Spinouts.R")
# Add variable encoding whether state has been trated by non-compete enforcement
# using Jeffers' court rulings dates
source("code/addNoncompeteEnforcementChanges.R")
# Add variable encoding state-level strength of non-compete enforcement from Bishara 2011 / Starr 2018
source("code/addNoncompeteEnforcementIndices.R")
# Next, prepare the data for panel regressions in Stata
source("code/prepareDataForStata.R")
rm(list = ls())
library(data.table)
data <- fread("data/compustat-spinouts.csv")
# Set NA xrd values to zero
data[is.na(xrd), xrd := 0]
data[is.na(capxv), capxv := 0]
data[is.na(sppe), sppe := 0]
## Compute moving averages
data[, xrd_3 := Reduce(`+`, shift(xrd, 0L:2L, type = "lag")), by = gvkey]
data[, xrd_5 := Reduce(`+`, shift(xrd, 0L:4L, type = "lag")), by = gvkey]
data[, xrd_ma3 := (1/3) * Reduce(`+`, shift(xrd, 0L:2L, type = "lag")), by = gvkey]
data[, xrd_lag1 := shift(xrd, 1L, type = "lag"), by = gvkey]
data[, patentApplicationCount_3 := Reduce(`+`, shift(patentApplicationCount, 0L:2L, type = "lag")), by = gvkey]
data[, patentApplicationCount_5 := Reduce(`+`, shift(patentApplicationCount, 0L:4L, type = "lag")), by = gvkey]
data[, patentApplicationCount_CW_3 := Reduce(`+`, shift(patentApplicationCount_CW, 0L:2L, type = "lag")), by = gvkey]
data[, patentApplicationCount_CW_5 := Reduce(`+`, shift(patentApplicationCount_CW, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_3 := Reduce(`+`, shift(patentCount, 0L:2L, type = "lag")), by = gvkey]
data[, patentCount_5 :=  Reduce(`+`, shift(patentCount, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_CW_3 :=  Reduce(`+`, shift(patentCount_CW, 0L:2L, type = "lag")), by = gvkey]
data[, patentCount_CW_5 :=  Reduce(`+`, shift(patentCount_CW, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_CW_cumulative_ma5 := (1/5) *  Reduce(`+`, shift(patentCount_CW_cumulative, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_cumulative_ma5 :=  (1/5) * Reduce(`+`, shift(patentCount_cumulative, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutCountUnweighted_2 :=  Reduce(`+`, shift(spinoutCountUnweighted, 0L:1L, type = "lag")), by = gvkey]
data[, spinoutCountUnweighted_3 :=  Reduce(`+`, shift(spinoutCountUnweighted, 0L:2L, type = "lag")), by = gvkey]
data[, spinoutCountUnweighted_5 := Reduce(`+`, shift(spinoutCountUnweighted, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutsDiscountedExitValue_5 := Reduce(`+`, shift(spinoutsDiscountedExitValue, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutsDiscountedFFValue_5 := Reduce(`+`, shift(spinoutsDiscountedFFValue, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutCount_2 :=  Reduce(`+`, shift(spinoutCount, 0L:1L, type = "lag")), by = gvkey]
data[, spinoutCount_3 := Reduce(`+`, shift(spinoutCount, 0L:2L, type = "lag")), by = gvkey]
data[, spinoutCount_5 := Reduce(`+`, shift(spinoutCount, 0L:4L, type = "lag")), by = gvkey]
data[, emp_ma5 := (1/5) * Reduce(`+`, shift(emp, 0L:4L, type = "lag")), by = gvkey]
data[, emp_lag1 := shift(emp, 1L, type = "lag"), by = gvkey]
data[ , ppent_lag1 := shift(ppent, 1L, type = "lag") , by = gvkey]
data[, investmentRate := (capxv - sppe) / ppent_lag1]
data[, xrdRate := xrd / ppent_lag1]
data[, revProd := revt / emp]
# Ignore compustat firms that never record R&D
data <- data[, if(max(na.omit(xrd)) > 0) .SD, by = gvkey]
# Ignore compustat firms that never have spinouts?
data <- data[, if(max(na.omit(spinoutCount)) >0) .SD, by = gvkey]
#------------------------------------------------#
#
# File name: prepareDataForStata.R
#
# Author: Nicolas Fernandez-Arias
#
# Purpose:
#
# This prepares the data / exports the data for
# use in Stata (which is way better for panel data
# regressions than R...)
#------------------------------------------------#
rm(list = ls())
library(data.table)
data <- fread("data/compustat-spinouts.csv")
# Set NA xrd values to zero
data[is.na(xrd), xrd := 0]
data[is.na(capxv), capxv := 0]
data[is.na(sppe), sppe := 0]
# Decide whether to use normalized variable or not --
# if not, COMMENT OUT these lines
#data[, xrd := (xrd - mean(xrd)) / sd(xrd)]
#data[, patentApplicationCount := (patentApplicationCount - mean(patentApplicationCount)) / sd(patentApplicationCount)]
#data[, patentApplicationCount_CW := (patentApplicationCount_CW - mean(patentApplicationCount_CW)) / sd(patentApplicationCount_CW)]
#data[, patentCount := (patentCount - mean(patentCount)) / sd(patentCount)]
#data[, patentCount_CW := (patentCount_CW - mean(patentCount_CW)) / sd(patentCount_CW)]
#data[, patentCount_CW_cumulative := (patentCount_CW_cumulative - mean(patentCount_CW_cumulative)) / sd(patentCount_CW_cumulative)]
#data[, emp := (emp - mean(emp,na.rm = TRUE)) / sd(emp, na.rm = TRUE)]
#data[, spinoutCount := (spinoutCount - mean(spinoutCount,na.rm = TRUE)) / sd(spinoutCount, na.rm = TRUE)]
#data[, spinoutCountUnweighted := (spinoutCountUnweighted - mean(spinoutCountUnweighted,na.rm = TRUE)) / sd(spinoutCountUnweighted, na.rm = TRUE)]
#data[, spinoutCountUnweighted_onlyExits := (spinoutCountUnweighted_onlyExits - mean(spinoutCountUnweighted_onlyExits,na.rm = TRUE)) / sd(spinoutCountUnweighted_onlyExits, na.rm = TRUE)]
#data[, emp := (emp - mean(emp,na.rm = TRUE)) / sd(emp, na.rm = TRUE)]
## Compute moving averages
data[, xrd_3 := Reduce(`+`, shift(xrd, 0L:2L, type = "lag")), by = gvkey]
data[, xrd_5 := Reduce(`+`, shift(xrd, 0L:4L, type = "lag")), by = gvkey]
data[, xrd_ma3 := (1/3) * Reduce(`+`, shift(xrd, 0L:2L, type = "lag")), by = gvkey]
data[, xrd_lag1 := shift(xrd, 1L, type = "lag"), by = gvkey]
data[, patentApplicationCount_3 := Reduce(`+`, shift(patentApplicationCount, 0L:2L, type = "lag")), by = gvkey]
data[, patentApplicationCount_5 := Reduce(`+`, shift(patentApplicationCount, 0L:4L, type = "lag")), by = gvkey]
data[, patentApplicationCount_CW_3 := Reduce(`+`, shift(patentApplicationCount_CW, 0L:2L, type = "lag")), by = gvkey]
data[, patentApplicationCount_CW_5 := Reduce(`+`, shift(patentApplicationCount_CW, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_3 := Reduce(`+`, shift(patentCount, 0L:2L, type = "lag")), by = gvkey]
data[, patentCount_5 :=  Reduce(`+`, shift(patentCount, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_CW_3 :=  Reduce(`+`, shift(patentCount_CW, 0L:2L, type = "lag")), by = gvkey]
data[, patentCount_CW_5 :=  Reduce(`+`, shift(patentCount_CW, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_CW_cumulative_ma5 := (1/5) *  Reduce(`+`, shift(patentCount_CW_cumulative, 0L:4L, type = "lag")), by = gvkey]
data[, patentCount_cumulative_ma5 :=  (1/5) * Reduce(`+`, shift(patentCount_cumulative, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutCountUnweighted_2 :=  Reduce(`+`, shift(spinoutCountUnweighted, 0L:1L, type = "lag")), by = gvkey]
data[, spinoutCountUnweighted_3 :=  Reduce(`+`, shift(spinoutCountUnweighted, 0L:2L, type = "lag")), by = gvkey]
data[, spinoutCountUnweighted_5 := Reduce(`+`, shift(spinoutCountUnweighted, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutsDiscountedExitValue_5 := Reduce(`+`, shift(spinoutsDiscountedExitValue, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutsDiscountedFFValue_5 := Reduce(`+`, shift(spinoutsDiscountedFFValue, 0L:4L, type = "lag")), by = gvkey]
data[, spinoutCount_2 :=  Reduce(`+`, shift(spinoutCount, 0L:1L, type = "lag")), by = gvkey]
data[, spinoutCount_3 := Reduce(`+`, shift(spinoutCount, 0L:2L, type = "lag")), by = gvkey]
data[, spinoutCount_5 := Reduce(`+`, shift(spinoutCount, 0L:4L, type = "lag")), by = gvkey]
data[, emp_ma5 := (1/5) * Reduce(`+`, shift(emp, 0L:4L, type = "lag")), by = gvkey]
data[, emp_lag1 := shift(emp, 1L, type = "lag"), by = gvkey]
data[ , ppent_lag1 := shift(ppent, 1L, type = "lag") , by = gvkey]
data[, investmentRate := (capxv - sppe) / ppent_lag1]
data[, xrdRate := xrd / ppent_lag1]
data[, revProd := revt / emp]
data <- data[year >= 1986]
data <- data[year <= 2015]
# Construct 4-digit NAICS codes
data[, naics6 := substr(naics,1,6)]
data[, naics5 := substr(naics,1,5)]
data[, naics4 := substr(naics,1,4)]
data[, naics3 := substr(naics,1,3)]
data[, naics2 := substr(naics,1,2)]
data[, naics1 := substr(naics,1,1)]
# Sort data
data <- data[order(gvkey,year)]
# Compute firm age
data[, firmAge := rowidv(gvkey)]
## Construct naics4-year and state-year variables
data[, stateYear := as.factor(paste(State,year))]
data[, naics4Year := as.factor(paste(naics4,year))]
data[, naics3Year := as.factor(paste(naics3,year))]
data[, naics2Year := as.factor(paste(naics2,year))]
data[, naics1Year := as.factor(paste(naics1,year))]
data[, naics4Year_count := .N, by = naics4Year]
data[naics4Year_count <= 10, naics4Year_drop := 1]
fwrite(data,"data/compustat-spinouts_Stata.csv")
# Next, prepare the data for panel regressions in Stata
source("code/prepareDataForStata.R")
# Next, prepare the data for panel regressions in Stata
source("code/prepareDataForStata.R")
source("code/makeScatterPlots.R")
source("code/mergePatents_RD-Spinouts.R")
# Add variable encoding whether state has been trated by non-compete enforcement
# using Jeffers' court rulings dates
source("code/addNoncompeteEnforcementChanges.R")
# Add variable encoding state-level strength of non-compete enforcement from Bishara 2011 / Starr 2018
source("code/addNoncompeteEnforcementIndices.R")
# Combine with data on R&D from c ompustat_annual
source("code/mergeRDwithSpinoutCounts.R")
source("code/mergePatents_RD-Spinouts.R")
# Add variable encoding whether state has been trated by non-compete enforcement
# using Jeffers' court rulings dates
source("code/addNoncompeteEnforcementChanges.R")
# Add variable encoding state-level strength of non-compete enforcement from Bishara 2011 / Starr 2018
source("code/addNoncompeteEnforcementIndices.R")
# Next, prepare the data for panel regressions in Stata
source("code/prepareDataForStata.R")
# Next, prepare the data for panel regressions in Stata
source("code/prepareDataForStata.R")
# Next, prepare the data for panel regressions in Stata
source("code/prepareDataForStata.R")
rm(list = ls())
compustat <- fread("raw/compustat/compustat_annual.csv")
compustat <- compustat[indfmt=="INDL" & datafmt=="STD" & popsrc=="D" & consol=="C"]
compustat <- compustat[ seq > 0]
# Combine with data on R&D from c ompustat_annual
source("code/mergeRDwithSpinoutCounts.R")
# Combine with data on R&D from c ompustat_annual
source("code/mergeRDwithSpinoutCounts.R")
library(data.table)
rm(list = ls())
setwd("~/nfernand@princeton.edu/PhD - Thesis/Research/Endogenous-growth-with-spinouts/empirics")
compustat <- fread("raw/compustat/compustat_annual.csv")
compustat <- compustat[indfmt=="INDL" & datafmt=="STD" & popsrc=="D" & consol=="C"]
compustat <- compustat[ seq > 0]
compustat[ , pref := fcoalesce(pstkrv,pstkl,pstk)]
?fcoalesce
?coalesce
library(dplyr)
compustat[ , pref := coalesce(pstkrv,pstkl,pstk)]
?trimws
